/*PADRE QUE HEREDARA DE LOS OTROS OBJETOS ESTE ES EL PADRE PERSONA*/
CREATE OR REPLACE TYPE PersonaOBJ AS OBJECT (
    DNI VARCHAR2(9),
    NOMBRE VARCHAR2(25),
    EDAD NUMBER,
    MEMBER FUNCTION GET_EDAD RETURN NUMBER,
    MEMBER FUNCTION GET_DNI RETURN VARCHAR2,
    MEMBER FUNCTION GET_NOMBRE RETURN VARCHAR2,
    MEMBER PROCEDURE SET_DNI(DNI_NEW VARCHAR2),
    MEMBER PROCEDURE SET_EDAD(EDAD_NEW NUMBER),
    MEMBER PROCEDURE SET_NOMBRE(NOMBRE_NEW VARCHAR2)
    )NOT FINAL;
    --CREAMOS EL CUERPO DE NUESTRA PERSONA que tendra las opciones para modificar los datos como dni,nombre,edad y devolver esos datos (getter y setters) :)
    CREATE OR REPLACE TYPE BODY PersonaOBJ AS
        MEMBER PROCEDURE SET_NOMBRE(NOMBRE_NEW IN VARCHAR2) IS
        BEGIN
            SELF.NOMBRE := NOMBRE_NEW;
            END;
        MEMBER PROCEDURE SET_DNI(DNI_NEW IN VARCHAR2) IS
        BEGIN
            SELF.DNI := DNI_NEW;
            END;
        MEMBER PROCEDURE SET_EDAD(EDAD_NEW IN NUMBER) IS
        BEGIN
            SELF.EDAD := EDAD_NEW;
            END;
        MEMBER FUNCTION GET_EDAD RETURN NUMBER IS
        BEGIN
            RETURN EDAD;
        END;    
        MEMBER FUNCTION GET_DNI RETURN VARCHAR2 IS
            BEGIN
                RETURN DNI;
            END;
        MEMBER FUNCTION GET_NOMBRE RETURN VARCHAR2 IS
            BEGIN
                RETURN NOMBRE;
            END;
        END;    
        
--creamos ahora el objeto alumno que hereda de persona
    --varray de las notas que contiene el alumno
        CREATE OR REPLACE TYPE A_NOTAS AS
        VARRAY(4) OF NUMERIC; 
        
        CREATE OR REPLACE TYPE A_ASIGNATURAS AS
        VARRAY(2) OF VARCHAR2(30);

CREATE OR REPLACE TYPE AlumnoOBJ UNDER PersonaOBJ(
        ES_DELEGADO VARCHAR2(2),
        TUTOR VARCHAR2(25),
        CENTRO VARCHAR2(30),
        NOTAS A_NOTAS,
        ASIGNATURAS A_ASIGNATURAS,
        MEMBER FUNCTION GET_NOTAS RETURN A_NOTAS,
        MEMBER FUNCTION GET_ES_DELEGADO RETURN VARCHAR2,
        MEMBER FUNCTION GET_TUTOR RETURN VARCHAR2,
        MEMBER FUNCTION GET_CENTRO RETURN VARCHAR2,
        MEMBER PROCEDURE SET_ES_DELEGADO(ES_DELEGADO_NEW VARCHAR2),
        MEMBER PROCEDURE SET_TUTOR(NEW_TUTOR VARCHAR2),
        MEMBER PROCEDURE SET_CENTRO(NEW_CENTRO VARCHAR2),
        MEMBER PROCEDURE SET_NOTAS(NEW_NOTAS A_NOTAS)
    );
    --aqui mas de lo mismo estamos creado los setters y getters de nuestro objeto alumno
  CREATE OR REPLACE TYPE BODY AlumnoOBJ AS
    MEMBER FUNCTION GET_ES_DELEGADO RETURN VARCHAR2 IS
        BEGIN
            RETURN ES_DELEGADO;
        END;
    MEMBER FUNCTION GET_TUTOR RETURN VARCHAR2 IS
        BEGIN
            RETURN TUTOR;
        END;
    MEMBER FUNCTION GET_CENTRO RETURN VARCHAR2 IS
        BEGIN
            RETURN CENTRO;
        END;
    MEMBER FUNCTION GET_NOTAS RETURN A_NOTAS IS
        BEGIN
            RETURN NOTAS;
        END;
    MEMBER PROCEDURE SET_NOTAS(NEW_NOTAS A_NOTAS) IS
        BEGIN
            SELF.NOTAS := NOTAS;
        END;

   MEMBER PROCEDURE SET_ES_DELEGADO(ES_DELEGADO_NEW VARCHAR2) IS
        BEGIN
            SELF.ES_DELEGADO := ES_DELEGADO_NEW;
        END;
    MEMBER PROCEDURE SET_TUTOR(NEW_TUTOR VARCHAR2) IS
        BEGIN
            SELF.TUTOR := NEW_TUTOR;
        END;
    MEMBER PROCEDURE SET_CENTRO(NEW_CENTRO VARCHAR2) IS
        BEGIN
            SELF.CENTRO := NEW_CENTRO;
        END;
END;
 
--Ahora voy a crear el objeto profesor que tambien hereda de persona

 CREATE OR REPLACE TYPE A_ASIGNATURA_IMPARTE AS --VARRAY DE ASIGNATURAS QUE PUEDE DAR EL PROFESOR
    VARRAY(2) OF VARCHAR2(25);


CREATE OR REPLACE TYPE ProfesorOBJ UNDER PersonaOBJ(
    CURSO_IMPARTE VARCHAR2(10),
    PUNTUACION_BUEN_PROFESOR NUMERIC,
    CENTRO VARCHAR2(30),
    ASIGNATURA_IMPARTE A_ASIGNATURA_IMPARTE,
    MEMBER FUNCTION GET_CURSO_IMPARTE RETURN VARCHAR2,
    MEMBER FUNCTION GET_PUNTUACION_BUEN_PROFESOR RETURN VARCHAR2,
    MEMBER FUNCTION GET_CENTRO RETURN VARCHAR2,
    MEMBER PROCEDURE SET_CURSO_IMPARTE(NEW_CURSO_IMPARTE VARCHAR2),
    MEMBER PROCEDURE SET_PUNTUACION_BUEN_PROFESOR(NEW_PUNTUACION_BUEN_PROFESOR NUMERIC),
    MEMBER PROCEDURE SET_CENTRO(NEW_CENTRO VARCHAR2)
);

 --setter y getter con su respectiva funciones sencillas
  CREATE OR REPLACE TYPE BODY ProfesorOBJ AS
    MEMBER FUNCTION GET_CURSO_IMPARTE RETURN VARCHAR2 IS
        BEGIN
            RETURN CURSO_IMPARTE;
        END;
        
        
    MEMBER FUNCTION GET_PUNTUACION_BUEN_PROFESOR RETURN VARCHAR2 IS
        BEGIN
            RETURN PUNTUACION_BUEN_PROFESOR;
        END;
        
    MEMBER FUNCTION GET_CENTRO RETURN VARCHAR2 IS
        BEGIN
            RETURN CENTRO;
        END;
        
    MEMBER PROCEDURE SET_CENTRO(NEW_CENTRO VARCHAR2) IS 
        BEGIN
            SELF.CENTRO := NEW_CENTRO;
        END;
        
    MEMBER PROCEDURE SET_CURSO_IMPARTE(NEW_CURSO_IMPARTE VARCHAR2) IS
        BEGIN
            SELF.CURSO_IMPARTE := NEW_CURSO_IMPARTE;
        END;       
        
    MEMBER PROCEDURE SET_PUNTUACION_BUEN_PROFESOR(NEW_PUNTUACION_BUEN_PROFESOR NUMERIC)IS
        BEGIN
            SELF.PUNTUACION_BUEN_PROFESOR := NEW_PUNTUACION_BUEN_PROFESOR;
        END;    
    END;
    
-- Por ultimo crearemos el objeto director que hereda de persona

CREATE OR REPLACE TYPE DirectorOBJ UNDER PersonaOBJ(
        CENTRO_DIRIGIENDO VARCHAR2(30),
        DEPARTAMENTO_A_CARGO VARCHAR2(40),
        SALARIO DECIMAL, --por ley debe ser publico el salario del director(por lo menos en la publica :) por poner algo
        MEMBER FUNCTION GET_CENTRO_DIRIGIENDO RETURN VARCHAR2,
        MEMBER FUNCTION GET_DEPARTAMENTO_A_CARGO RETURN VARCHAR2,
        MEMBER FUNCTION GET_SALARIO RETURN DECIMAL,
        MEMBER PROCEDURE SET_CENTRO_DIRIGIENDO(NEW_CENTRO_DIRIGIENDO VARCHAR2),
        MEMBER PROCEDURE SET_DEPARTAMENTO_A_CARGO(NEW_DEPARTAMENTO_A_CARGO VARCHAR2),
        MEMBER PROCEDURE SET_SALARIO(NEW_SALARIO DECIMAL)
    );
    -- setter y getter de el director :)
    CREATE OR REPLACE TYPE BODY DirectorOBJ AS
        MEMBER FUNCTION GET_CENTRO_DIRIGIENDO RETURN VARCHAR2 IS
            BEGIN
                RETURN CENTRO_DIRIGIENDO;
            END;
          
        MEMBER FUNCTION GET_DEPARTAMENTO_A_CARGO RETURN VARCHAR2 IS
            BEGIN
                RETURN DEPARTAMENTO_A_CARGO;
            END;
        
        MEMBER FUNCTION GET_SALARIO RETURN DECIMAL IS
            BEGIN
                RETURN SALARIO;
            END;
            
        MEMBER PROCEDURE SET_CENTRO_DIRIGIENDO(NEW_CENTRO_DIRIGIENDO VARCHAR2) IS
            BEGIN
                SELF.CENTRO_DIRIGIENDO := NEW_CENTRO_DIRIGIENDO;
            END;
        
        MEMBER PROCEDURE SET_DEPARTAMENTO_A_CARGO(NEW_DEPARTAMENTO_A_CARGO VARCHAR2) IS
            BEGIN
                SELF.DEPARTAMENTO_A_CARGO := NEW_DEPARTAMENTO_A_CARGO;
            END;
        
        MEMBER PROCEDURE SET_SALARIO(NEW_SALARIO DECIMAL) IS
            BEGIN
                SELF.SALARIO := NEW_SALARIO;
            END;
        END;
        
--CURSORES 
--EMPEZAREMOS CON CURSORES SENCILLOS HASTA ALGO MAS COMPLEJO
    --AQUI LO QUE HAGO ES UN CURSOR DONDE NOS MUESTRA LOS PROFESORES CON MEJOR PUNTUACION COMO PROFESOR.
    --RECORRO el varray junto con la tabla con sus respectivos datos
    DECLARE 
        V_NOMBREPROFE PROFESOR.NOMBRE%TYPE;
        V_DNIPROFESOR PROFESOR.DNI%TYPE;
        V_EDADPROFESOR PROFESOR.EDAD%TYPE;
        V_CENTROPROFESOR PROFESOR.CENTRO%TYPE;
        V_ASIGNATURA_IMPARTEPROFESOR PROFESOR.ASIGNATURA_IMPARTE%TYPE;
    CURSOR PROFESOR_NOTA_CURSOR IS
    SELECT NOMBRE,DNI,EDAD,CENTRO,ASIGNATURA_IMPARTE FROM PROFESOR WHERE (PUNTUACION_BUEN_PROFESOR >4);
        BEGIN
            OPEN PROFESOR_NOTA_CURSOR;
                DBMS_OUTPUT.PUT_LINE('Los datos de los profesores con nota mayor a 4 son: ');
                LOOP
                    FETCH PROFESOR_NOTA_CURSOR INTO V_NOMBREPROFE ,V_DNIPROFESOR,V_EDADPROFESOR,V_CENTROPROFESOR,V_ASIGNATURA_IMPARTEPROFESOR;
                    EXIT WHEN PROFESOR_NOTA_CURSOR%NOTFOUND; --SI NO ENCUETRA LA TABLA TERMINA
                    DBMS_OUTPUT.PUT_LINE('NOMBRE PROFESOR: '||V_NOMBREPROFE||' |CON DNI: '||V_DNIPROFESOR||' |CON EDAD: '||V_EDADPROFESOR||' |CENTRO TRABAJO: '||V_CENTROPROFESOR);
                     FOR I IN 1..V_ASIGNATURA_IMPARTEPROFESOR.COUNT LOOP
                    DBMS_OUTPUT.PUT_LINE('ASIGNATURAS QUE IMPARTEN: '||V_ASIGNATURA_IMPARTEPROFESOR(I));
                    END LOOP;
                END LOOP;    
            CLOSE PROFESOR_NOTA_CURSOR;
        END;
--CURSOR DE UN ALUMNO
    --SACAREMOS LOS DATOS QUE TIENE EL ALUMNO DE 1 EN 1 RECORRIENDO TODO
    DECLARE
        V_NOMBREALUMNO ALUMNOS.NOMBRE%TYPE;
        V_DNIALUMNO ALUMNOS.DNI%TYPE;
        V_EDADALUMNO ALUMNOS.EDAD%TYPE;
        V_CENTROALUMNO ALUMNOS.CENTRO%TYPE;
        V_NOTASALUMNOS ALUMNOS.NOTAS%TYPE;
        V_ASIGNATURASALUMNO ALUMNOS.ASIGNATURAS%TYPE;
        CURSOR ALUMNO_CURSOR IS
        SELECT NOMBRE,DNI,EDAD,CENTRO,NOTAS,ASIGNATURAS FROM ALUMNOS;
            BEGIN
                OPEN ALUMNO_CURSOR;
                    DBMS_OUTPUT.PUT_LINE('LOS ALUMNOS QUE SE ENCUENTRA EN LA BASE DE DATOS SON: ');
                    LOOP
                        FETCH ALUMNO_CURSOR INTO V_NOMBREALUMNO,V_DNIALUMNO,V_EDADALUMNO,V_CENTROALUMNO,V_NOTASALUMNOS,V_ASIGNATURASALUMNO;
                        EXIT WHEN ALUMNO_CURSOR%NOTFOUND;-- SI NO ENCUENTRA ALUMNOS.
                        DBMS_OUTPUT.PUT_LINE('NOMBRE: '||V_NOMBREALUMNO||' |DNI: '||V_DNIALUMNO||' |EDAD: '||V_EDADALUMNO||' |CENTRO: '||V_CENTROALUMNO);
                        FOR I IN 1..V_NOTASALUMNOS.COUNT LOOP
                            IF (V_NOTASALUMNOS(I)>8)THEN
                                DBMS_OUTPUT.PUT_LINE('NOTA CON SOBRESALIENTE(MATRICULA HONOR): '||V_NOTASALUMNOS(I));
                            ELSE
                                DBMS_OUTPUT.PUT_LINE('NOTA  : '||V_NOTASALUMNOS(I));
                                END IF;
                        END LOOP;
                        
                        FOR J IN 1..V_ASIGNATURASALUMNO.COUNT LOOP
                         DBMS_OUTPUT.PUT_LINE('ASIGNATURAS QUE CURSA: '||V_ASIGNATURASALUMNO(J));
                        END LOOP;
                    END LOOP;
                    CLOSE ALUMNO_CURSOR;
            END;
--CURSOR DE UN DIRECTOR
    DECLARE
        V_NOMBREDIRECTOR DIRECTOR.NOMBRE%TYPE;
        V_DNIDIRECTOR DIRECTOR.DNI%TYPE;
        V_EDADDIRECTOR DIRECTOR.EDAD%TYPE;
        V_DEPARTAMENTO DIRECTOR.DEPARTAMENTO_A_CARGO%TYPE;
        V_SALARIO DIRECTOR.SALARIO%TYPE;
        CURSOR DIRECTOR_CURSOR IS 
        SELECT NOMBRE,DNI,EDAD,DEPARTAMENTO_A_CARGO,SALARIO FROM DIRECTOR;
            BEGIN
                OPEN DIRECTOR_CURSOR;
                     DBMS_OUTPUT.PUT_LINE('LOS DIRECTORES DE CADA CENTRO SON : ');
                     LOOP
                            FETCH DIRECTOR_CURSOR INTO V_NOMBREDIRECTOR,V_DNIDIRECTOR,V_EDADDIRECTOR,V_DEPARTAMENTO,V_SALARIO;
                            EXIT WHEN DIRECTOR_CURSOR%NOTFOUND;
                            DBMS_OUTPUT.PUT_LINE('NOMBRE DIRECTOR: '||V_NOMBREDIRECTOR||' |DNI DIRECTOR: '||V_DNIDIRECTOR||' |EDAD DIRECTOR: '||V_EDADDIRECTOR||' |DEPARTAMENTO A CARGO: '||V_DEPARTAMENTO||' |SALARIO DIRECTOR: '||V_SALARIO||'$');
                     END LOOP;
                     CLOSE DIRECTOR_CURSOR;
            END;
            
--PROCEDIMIENTOS PARA NUESTRAS TABLAS OBJETOS-------------------------------------------- 

        ---PROCEDIMIENTO PARA INSERTAR VALORES EN UN PROFESOR GUAY ;)
    CREATE OR REPLACE PROCEDURE INSERTARPROFESOR(
        INSERT_DNI IN PROFESOR.DNI%TYPE,
        INSERT_NOMBRE IN PROFESOR.NOMBRE%TYPE,
        INSERT_EDAD IN PROFESOR.EDAD%TYPE,
        INSERT_CENTRO IN PROFESOR.CENTRO%TYPE,
        INSERT_ASIGNATURA_IMPARTE IN PROFESOR.ASIGNATURA_IMPARTE%TYPE
    )
        IS
            BEGIN
                INSERT INTO PROFESOR (DNI,NOMBRE,EDAD,CENTRO,ASIGNATURA_IMPARTE) 
                    VALUES (INSERT_DNI,INSERT_NOMBRE,INSERT_EDAD,INSERT_CENTRO,INSERT_ASIGNATURA_IMPARTE);
                COMMIT;
            END;

            
            
        --INSERTAR VALORES EN UN DIRECTOR :)
        
        CREATE OR REPLACE PROCEDURE INSERTARDIRECTOR(
            INSERT_DNI IN DIRECTOR.DNI%TYPE,
            INSERT_NOMBRE IN DIRECTOR.NOMBRE%TYPE,
            INSERT_EDAD IN DIRECTOR.EDAD%TYPE,
            INSERT_CENTRO_DIRIGIENDO IN DIRECTOR.CENTRO_DIRIGIENDO%TYPE,
            INSERT_SALARIO IN DIRECTOR.SALARIO%TYPE
        )
            IS
                BEGIN
                    INSERT INTO DIRECTOR(DNI,NOMBRE,EDAD,CENTRO_DIRIGIENDO,SALARIO)
                        VALUES (INSERT_DNI,INSERT_NOMBRE,INSERT_EDAD,INSERT_CENTRO_DIRIGIENDO,INSERT_SALARIO);
                    COMMIT;
                END;

        --INSERTAR PARA ALUMNOS
        CREATE OR REPLACE PROCEDURE INSERTARALUMNOS(
            INSERT_DNI IN ALUMNOS.DNI%TYPE,
            INSERT_NOMBRE IN ALUMNOS.NOMBRE%TYPE,
            INSERT_EDAD IN ALUMNOS.EDAD%TYPE,
            INSERT_DELEGADO IN ALUMNOS.ES_DELEGADO%TYPE,
            INSERT_TUTORES IN ALUMNOS.TUTOR%TYPE,
            INSERT_CENTROS IN ALUMNOS.CENTRO%TYPE,
            INSERT_NOTAS IN ALUMNOS.NOTAS%TYPE,
            INSERT_ASIGNATURAS IN ALUMNOS.ASIGNATURAS%TYPE
        )
         IS
            BEGIN
                INSERT INTO ALUMNOS(DNI,NOMBRE,EDAD,ES_DELEGADO,TUTOR,CENTRO,NOTAS,ASIGNATURAS)
                    VALUES(INSERT_DNI,INSERT_NOMBRE,INSERT_EDAD,INSERT_DELEGADO,INSERT_TUTORES,INSERT_CENTROS,INSERT_NOTAS,INSERT_ASIGNATURAS);
                COMMIT;
            END;

            
-------------------------PROCEDIMIENTOS PARA LA ELIMINACION DE TABLAS------------------------------------------
--ELIMINAR ALUMNOS
            CREATE OR REPLACE PROCEDURE ELIMINARALUMNOS(
            DELETE_DNI IN ALUMNOS.DNI%TYPE
        )
         IS
            BEGIN
                DELETE FROM ALUMNOS C
                WHERE DELETE_DNI = C.DNI;
                COMMIT;
            END;

--ELIMINAR PROFESORES
            CREATE OR REPLACE PROCEDURE ELIMINARPROFESOR(
            DELETE_DNI IN PROFESOR.DNI%TYPE
        )
         IS
            BEGIN
                DELETE FROM PROFESOR P
                WHERE DELETE_DNI = P.DNI;
                COMMIT;
            END;

--ELIMINAR DIRECTOR
            CREATE OR REPLACE PROCEDURE ELIMINARDIRECTOR(
            DELETE_DNI IN DIRECTOR.DNI%TYPE
        )
         IS
            BEGIN
                DELETE FROM DIRECTOR D
                WHERE DELETE_DNI = D.DNI;
                COMMIT;
            END;


--------------------------------PROCEDIMIENTO UPDATE----------------------------------------

--UPDATE DE ALUMNOS
    CREATE OR REPLACE PROCEDURE ACTUALIZARALUMNO(
        UPDATE_DNI IN ALUMNOS.DNI%TYPE,
        UPDATE_NOMBRE IN ALUMNOS.NOMBRE%TYPE,
        UPDATE_EDAD IN ALUMNOS.EDAD%TYPE,
        UPDATE_DELEGADO IN ALUMNOS.ES_DELEGADO%TYPE,
        UPDATE_TUTORES IN ALUMNOS.TUTOR%TYPE,
        UPDATE_CENTROS IN ALUMNOS.CENTRO%TYPE,
        UPDATE_NOTAS IN ALUMNOS.NOTAS%TYPE,
        UPDATE_ASIGNATURAS IN ALUMNOS.ASIGNATURAS%TYPE
    )
        IS
            BEGIN
                UPDATE ALUMNOS
                    SET DNI = UPDATE_DNI , NOMBRE = UPDATE_NOMBRE , EDAD = UPDATE_EDAD , ES_DELEGADO = UPDATE_DELEGADO ,
                    TUTOR = UPDATE_TUTORES , CENTRO = UPDATE_CENTROS , NOTAS = UPDATE_NOTAS , ASIGNATURAS = UPDATE_ASIGNATURAS
                    WHERE DNI = UPDATE_DNI;
                    COMMIT;
            END;

--UPDATE DE PROFESOR
    CREATE OR REPLACE PROCEDURE ACTUALIZARPROFESOR(
        UPDATE_DNI IN PROFESOR.DNI%TYPE,
        UPDATE_NOMBRE IN PROFESOR.NOMBRE%TYPE,
        UPDATE_EDAD IN PROFESOR.EDAD%TYPE,
        UPDATE_CURSO_IMPARTE IN PROFESOR.CURSO_IMPARTE%TYPE,
        UPDATE_PUNTUACION IN PROFESOR.PUNTUACION_BUEN_PROFESOR%TYPE,
        UPDATE_CENTROS IN PROFESOR.CENTRO%TYPE,
        UPDATE_ASIGNATURAS_IMPARTE IN PROFESOR.ASIGNATURA_IMPARTE%TYPE
    )
        IS
            BEGIN
                UPDATE PROFESOR
                    SET DNI = UPDATE_DNI , NOMBRE = UPDATE_NOMBRE , EDAD = UPDATE_EDAD , CURSO_IMPARTE = UPDATE_CURSO_IMPARTE ,
                    PUNTUACION_BUEN_PROFESOR = UPDATE_PUNTUACION , CENTRO = UPDATE_CENTROS, ASIGNATURA_IMPARTE = UPDATE_ASIGNATURAS_IMPARTE
                    WHERE DNI = UPDATE_DNI;
                    COMMIT;
            END;


--UPDATE DE DIRECTOR
CREATE OR REPLACE PROCEDURE ACTUALIZARDIRECTOR(
            UPDATE_DNI IN DIRECTOR.DNI%TYPE,
            UPDATE_NOMBRE IN DIRECTOR.NOMBRE%TYPE,
            UPDATE_EDAD IN DIRECTOR.EDAD%TYPE,
            UPDATE_CENTRO_DIRIGIENDO IN DIRECTOR.CENTRO_DIRIGIENDO%TYPE,
            UPDATE_DEPARTAMENTO IN DIRECTOR.DEPARTAMENTO_A_CARGO%TYPE,
            UPDATE_SALARIOS IN DIRECTOR.SALARIO%TYPE
    )
        IS
            BEGIN
                UPDATE DIRECTOR
                    SET DNI = UPDATE_DNI , NOMBRE = UPDATE_NOMBRE , EDAD = UPDATE_EDAD , CENTRO_DIRIGIENDO = UPDATE_CENTRO_DIRIGIENDO ,
                   DEPARTAMENTO_A_CARGO = UPDATE_DEPARTAMENTO , SALARIO = UPDATE_SALARIOS
                    WHERE DNI = UPDATE_DNI;
                    COMMIT;
            END;              